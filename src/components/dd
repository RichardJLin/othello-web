"use client";

import React, { useEffect, useState, useCallback } from 'react';
import { loadOthelloModule } from '@/lib/othello';
import { AlertCircle } from 'lucide-react';
import { Alert, AlertDescription } from '@/components/ui/alert';
import type {
  GameInstance,
  GameState,
  GameScores,
  MCTSStats,
  MCTSStatsOverlayProps
} from '@/lib/types';

const MCTSStatsOverlay = ({ stats }: MCTSStatsOverlayProps) => {
  if (!stats || !stats.visits) return null;
  
  const winRate = stats.visits > 0 ? (stats.wins / stats.visits * 100).toFixed(1) : 0;
  
  return (
    <div className="absolute -top-16 left-1/2 transform -translate-x-1/2 bg-white/90 backdrop-blur-sm border border-gray-200 rounded-lg p-2 shadow-lg z-50 whitespace-nowrap">
      <div className="text-sm font-medium">
        Win Rate: {winRate}%
      </div>
      <div className="text-xs text-gray-500">
        ({stats.wins}/{stats.visits} simulations)
      </div>
    </div>
  );
};

const OthelloBoard = () => {
  const [board, setBoard] = useState<(0 | 1 | null)[]>(() => {
    const initialBoard = Array(64).fill(null);
    initialBoard[27] = 0; // White
    initialBoard[28] = 1; // Black
    initialBoard[35] = 1; // Black
    initialBoard[36] = 0; // White
    return initialBoard;
  });

  const [gameInstance, setGameInstance] = useState<GameInstance>({
    module: null,
    game: null
  });
  
  const [currentPlayer, setCurrentPlayer] = useState<number>(1);
  const [possibleMoves, setPossibleMoves] = useState<number[]>([]);
  const [winner, setWinner] = useState<number | null>(null);
  const [isLoading, setIsLoading] = useState<boolean>(true);
  const [error, setError] = useState<string | null>(null);
  const [scores, setScores] = useState<GameScores>({ black: 2, white: 2 });
  const [playerColor, setPlayerColor] = useState<number>(0);
  const [showStartScreen, setShowStartScreen] = useState<boolean>(true);
  const [hoveredCell, setHoveredCell] = useState<number | null>(null);
  const [hoveredCellStats, setHoveredCellStats] = useState<MCTSStats | null>(null);
  const [hint, setHint] = useState<number | null>(null);
  const [hintStats, setHintStats] = useState<MCTSStats | null>(null);
